{"version":3,"sources":["components/Spinner.js","components/Navbar.js","components/Footer.js","components/ScrollToTopBtn.js","App.js","serviceWorker.js","components/Utils/ScrollToTop.js","index.js"],"names":["Spinner","className","withRouter","darkMode","setDarkMode","active","window","location","pathname","document","addEventListener","$navbarBurgers","Array","prototype","slice","call","querySelectorAll","forEach","anchor","querySelector","classList","remove","length","el","target","dataset","$target","getElementById","toggle","role","id","aria-label","to","color","aria-expanded","data-target","aria-hidden","includes","rel","href","style","cursor","onClick","Footer","type","data-tip","fill","size","ScrollToTopBtn","scrolling","onscroll","setInterval","topBtn","navbar","pageYOffset","display","add","body","scrollTo","top","behavior","documentElement","Home","lazy","ResourceREADME","Resources","App","useState","searchInput","setSearchInput","category","setCategory","handleInputChange","value","handleChangeInCategory","val","removeActiveEle","element","useEffect","isDarkMode","JSON","parse","localStorage","getItem","setItem","marginTop","fallback","exact","path","component","render","props","Boolean","hostname","match","ScrollToTop","prevProps","this","React","Component","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45caa0a4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Spinner = () => {\n  return (\n    <div className='loader-wrapper'>\n      <div className='loader is-loading'></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React from 'react';\nimport { Terminal, Sun, Moon } from 'react-feather';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst Navbar = ({ darkMode, setDarkMode }) => {\n  const active = window.location.pathname;\n  document.addEventListener('DOMContentLoaded', () => {\n    const $navbarBurgers = Array.prototype.slice.call(\n      document.querySelectorAll('.navbar-burger'),\n      0\n    );\n    const anchors = document.querySelectorAll('.navbar-item');\n    anchors.forEach((anchor) => {\n      anchor.addEventListener('click', () => {\n        document\n          .querySelector('#navbarBasicExample')\n          .classList.remove('is-active');\n\n        document.querySelector('.navbar-burger').classList.remove('is-active');\n      });\n    });\n\n    if ($navbarBurgers.length > 0) {\n      $navbarBurgers.forEach((el) => {\n        el.addEventListener('click', () => {\n          const target = el.dataset.target;\n          const $target = document.getElementById(target);\n          el.classList.toggle('is-active');\n          $target.classList.toggle('is-active');\n        });\n      });\n    }\n  });\n\n  return (\n    <nav\n      className='navbar is-fixed-top is-light'\n      role='navigation'\n      id='navbar'\n      aria-label='main navigation'\n    >\n      <div className='navbar-brand'>\n        <Link className='navbar-item' id='brand' to='/'>\n          <Terminal color='blue' />\n          &emsp;WEBDEVSCOM\n        </Link>\n\n        <div\n          role='button'\n          className='navbar-burger burger'\n          aria-label='menu'\n          aria-expanded='false'\n          data-target='navbarBasicExample'\n        >\n          <span aria-hidden='true'></span>\n          <span aria-hidden='true'></span>\n          <span aria-hidden='true'></span>\n        </div>\n      </div>\n\n      <div id='navbarBasicExample' className='navbar-menu'>\n        <div className='navbar-end'>\n          <Link\n            className={`navbar-item ${active === '/' ? 'is-active' : ''}`}\n            to='/'\n          >\n            Home\n          </Link>\n\n          <Link\n            className={`navbar-item ${\n              active.includes('/resources') ? 'is-active' : ''\n            }`}\n            to='/resources'\n          >\n            Resources\n          </Link>\n\n          <Link\n            className={`navbar-item ${\n              active === '/bookmarked' ? 'is-active' : ''\n            }`}\n            to='/bookmarked'\n          >\n            My BookMarks\n          </Link>\n\n          <a\n            className='navbar-item'\n            rel='noopener noreferrer'\n            target='_blank'\n            href='https://github.com/WebDevsCom/webDevsCom/graphs/contributors'\n          >\n            Contributors\n          </a>\n          <div\n            className='navbar-item'\n            style={{ cursor: 'pointer' }}\n            onClick={() => setDarkMode(!darkMode)}\n          >\n            {darkMode ? <Sun color='#00d1b2' /> : <Moon color='#00d1b2' />}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default withRouter(Navbar);\n","import React from 'react';\nimport {\n  Heart,\n  Facebook,\n  Instagram,\n  GitHub,\n  Twitter,\n  Linkedin,\n} from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nconst Footer = () => {\n  return (\n    <footer className='footer'>\n      <ReactTooltip type='light' />\n      <p className='has-text-centered is-size-4 has-text-grey-light'>• • •</p>\n      <div className='column'>\n        <div className='buttons is-centered'>\n          <a\n            href='https://www.facebook.com/binu.kumar.90857'\n            target='_blank'\n            rel='noopener noreferrer'\n            className='button button-special is-rounded box-shadow-lift'\n            data-tip='connect on Facebook 🦸‍♂'\n          >\n            <Facebook color='blue' className='icon' />\n          </a>\n          <a\n            href='https://www.instagram.com/binu__42/'\n            target='_blank'\n            rel='noopener noreferrer'\n            className='button button-special is-rounded box-shadow-lift'\n            data-tip='connect on Instagram 🎉'\n          >\n            <Instagram color='#C74B91' className='icon' />\n          </a>\n          <a\n            href='https://github.com/Binu42'\n            target='_blank'\n            rel='noopener noreferrer'\n            className='button button-special is-rounded box-shadow-lift'\n            data-tip='connect on Github ❤️'\n          >\n            <GitHub className='icon' />\n          </a>\n          <a\n            href='https://twitter.com/BinuKum59882786'\n            target='_blank'\n            rel='noopener noreferrer'\n            className='button button-special is-rounded box-shadow-lift'\n            data-tip='connect on Twitter 🤷‍♂️'\n          >\n            <Twitter color='#1DA1F2' className='icon' />\n          </a>\n          <a\n            href='https://www.linkedin.com/in/binu-kumar-5a7038146/'\n            target='_blank'\n            rel='noopener noreferrer'\n            className='is-hidden-touch button button-special is-rounded box-shadow-lift'\n            data-tip='connect on Linkedin 👨‍⚖️'\n          >\n            <Linkedin color='#0077B5' className='icon' />\n          </a>\n        </div>\n      </div>\n      <div className='column has-text-centered'>\n        <p className='subtitle is-7 is-capitalized has-text-danger'>\n          This Project is just for Learning and teaching purposes.\n        </p>\n      </div>\n      <div className='column has-text-centered'>\n        <p className='menu-label'>\n          Made with <Heart color='red' fill='red' size='15px' />{' '}\n          <a\n            href='https://binu42.netlify.com'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            By WEBDEVSCOM\n          </a>{' '}\n          <br />\n          &copy;2020\n        </p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { ArrowUpCircle } from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nconst ScrollToTopBtn = () => {\n  let scrolling = false;\n  window.onscroll = function () {\n    scrolling = true;\n  };\n\n  setInterval(() => {\n    const topBtn = document.getElementById('topBtn');\n    const navbar = document.getElementById('navbar');\n    if (scrolling && topBtn) {\n      if (window.pageYOffset > 20) {\n        topBtn.style.display = 'block';\n        navbar.classList.add('box-shadow');\n        navbar.classList.remove('is-light');\n        navbar.classList.add('is-white');\n      } else {\n        topBtn.style.display = 'none';\n        navbar.classList.remove('box-shadow');\n        navbar.classList.add('is-light');\n        navbar.classList.remove('is-white');\n      }\n      scrolling = false;\n    }\n  });\n\n  // When the user clicks on the button, scroll to the top of the document\n  function topFunction() {\n    document.body.scrollTo({ top: 0, behavior: 'smooth' }); // For Safari\n    document.documentElement.scrollTo({ top: 0, behavior: 'smooth' }); // For Chrome, Firefox, IE and Opera\n  }\n  return (\n    <>\n      <ReactTooltip type='light' />\n      <div\n        id='topBtn'\n        className='button button-special is-rounded box-shadow-lift'\n        style={{ cursor: 'pointer' }}\n        onClick={topFunction}\n        data-tip='Scroll back to top'\n      >\n        <ArrowUpCircle color='blue' className='icon' />\n      </div>\n    </>\n  );\n};\n\nexport default ScrollToTopBtn;\n","import React, { useState, useEffect, Suspense, lazy } from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Footer from './components/Footer';\nimport ScrollToTopBtn from './components/ScrollToTopBtn';\nimport Spinner from './components/Spinner';\n\nconst Home = lazy(() => import('./components/Home/Home'));\nconst ResourceREADME = lazy(() =>\n  import('./components/Resources/ResourceREADME')\n);\nconst Resources = lazy(() => import('./components/Resources/Resources'));\n\nfunction App() {\n  const [searchInput, setSearchInput] = useState('');\n  const [category, setCategory] = useState('');\n  const [darkMode, setDarkMode] = useState(null);\n  const handleInputChange = (value) => {\n    if (category !== '') handleChangeInCategory('');\n    setSearchInput(value);\n  };\n\n  const handleChangeInCategory = (val) => {\n    if (searchInput !== '') setSearchInput('');\n    const removeActiveEle = document.getElementById(\n      category === '' ? 'all' : category\n    );\n    if (removeActiveEle) removeActiveEle.classList.remove('active-tag');\n    setCategory(val);\n    const element = document.getElementById(val === '' ? 'all' : val);\n    if (element) element.classList.add('active-tag');\n  };\n\n  useEffect(() => {\n    const isDarkMode = JSON.parse(localStorage.getItem('dark-mode'));\n\n    if (isDarkMode === true) {\n      setDarkMode(true);\n    } else {\n      setDarkMode(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('dark-mode', darkMode);\n    if (darkMode) {\n      document.querySelector('body').classList.add('dark-mode');\n    } else {\n      document.querySelector('body').classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n  return (\n    <div className='App'>\n      <Navbar darkMode={darkMode} setDarkMode={setDarkMode} />\n      <ScrollToTopBtn />\n      <div style={{ marginTop: '3rem' }}></div>\n      <Suspense fallback={<Spinner />}>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route\n            exact\n            path={['/resources', '/bookmarked']}\n            render={() => (\n              <Resources\n                handleInputChange={handleInputChange}\n                searchInput={searchInput}\n                handleChangeInCategory={handleChangeInCategory}\n                category={category}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/resources/:id'\n            render={(props) => <ResourceREADME {...props} />}\n          />\n          <Redirect to='/' />\n        </Switch>\n      </Suspense>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ScrollToTop from './components/Utils/ScrollToTop';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}